= L'agile, fragilité et rapports de force
Julien Kirch
v0.1, 2018-10-15
:article_lang: fr

Deux questions pour comprendre la fiabilité d'un système :
* quelles boucles de feedback en régime nominal ?
* quelles méchanismes quand ça se passe mal ?

== Le V

Dans le V la boucle de feedback est simple : il y a les inputs métier et tech qui arrivent sur le·a chef·fe de projet, et le plan redescend sur les dev qui doivent executer
La difficulté à ajuster peut rendre le fonctionnement pas très efficace

Généralement le lien hiérarchique suit le même chemin : les dev sont "sous" le·a chef·fe de projet

Le besoin des devs est de rendre le·a chef·fe de projet de projet content pour avoir une augmentation

En cas de problème, l'équipe de dev est légitime à protester contre un planning ou des choix irréalistes : le rapport de force est clair

Le système est fiable : en cas de problème il y a un fonctionnement connu qui créé un feedback

== L'agile

Dans l'agile la théorie est d'avoir une "équipe projet" où les décisions sont collectives

Cela signifie que les différentes forces s'appliquent à l'équipe, cela signifie souvent que les contraintes métiers et calendaires passent par le·a responsable projet alors que les contraintes tech sont directement branchées sur les devs

Les décisions sont sensées être collectives

Cela peut signifier une meilleure efficacité car les retours de tout le monde sont sensés être pris en compte

D'un autre côté cela signifie que tout le monde se doit d'assumer les décisions

Le problème est quand les choses se passent mal ou qu'une des parties prenantes ne jouent pas le jeu

Par exemple un·e reponsable projet qui n'écoute pas peut dans une certaine mesure imposer ses décisions aux devs, et tenter de les priver de leurs moyens de s'y opposer en les accusants de ne pas jouer collectif, en agile on attend des personnes qu'il·elle·s internalisent les contraintes de la structures

Le·a reponsable projet est en effet souvent responsable hiérarchique, ou alors il·elle est un input important dans la boucle hiérarchique

Un·e coach peut être un outil utile pour le·a PM dans cette approche en encourageant les devs à coopérer et à trouver une bonne solution acceptable par tout le monde, c'est à dire — si le·a PM ne bouge pas — à forcer les devs à s'aligner sur lui·elle

Même si le·a coach peut parfois essayer de dénouer le problème, ça lui demande de prendre le risque de mécontenter son·a client·e qui est typiquement le·a PM, donc on ne pas exiger ça

Dans ce cas il n'y a plus de boucle de feedback : les devs se retrouvent démunis pour exercer une force contraire

L'agile peut donc être un moyen de priver les devs des moyens de résister à des décisions injustes

Le système est donc fragile : certains
