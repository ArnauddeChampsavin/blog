= Légitimité, égo & programmation
Julien Kirch
v0.1, 2019-01-18
:article_lang: fr

Quand je réfléchis aux questions d'organisation du travail, ma première règle est

[quote]
___
Les personnes doivent pouvoir travailler, autant que possible, dans un environnement serein.
___

Cela signifie : pas dans la peur, pas dans une urgence permantente, pas dans un bruit nuisible …

Dans leur travail, la grande majorité des personnes ont besoin de se sentir légitime dans ce qu'elles font, c'est à dire de sentir qu'elles sont à leurs place.

Cela passe par la reconnaissance de ses savoir-faire : reconnaître le savoir-faire d'une personne c'est confirmer qu'elle possède une maîtrise qui justifie qu'elle est à sa place.

== Légitimité et code

Une partie du savoir-faire de développement consiste à savoir écrire du code.
On y accorde d'ailleurs link:../assholes[beaucoup d'importance] : il y a les personnes qui savent coder, et celles qui ne savent pas, celles qui savent coder dans un langage noble et légitime et celles qui ne savent que coder dans des langages _ig_nobles.

Le niveau de compétence dans des langages de programmation est donc souvent important pour l'estime de soi des personnes qui développent.

== Egoless programming

Quand on code on fait parfois des erreurs.
L'objectif est de pouvoir corriger et potentiellement d'apprendre de ces erreurs lorsqu'elles sont identifiées.

Malheureusement, si la qualité du code est importante pour l'estime de soi, faire une erreur dans son code peut mettre en cause cette estime de soi.
Corriger un bug dans son code est donc bon pour le code mais peut être difficile pour la personne.

Une séance de peer review, même menée dans un environnement non toxique, va identifier des erreurs, et peut donc être ressentie comme une attaque contre soi.

Une manière de prévenir ces réactions négatives et une injonction à l'_egoless programming_, c'est à dire à répéter à la personne de ne pas s'identifier à son code.
Si la personne s'identifie à son code parce qu'elle, comme beaucoup de monde, il s'agit d'un moyen pour elle de se sentir légitime, lui enjoindre de ne pas le faire revient à la priver de cette légitimité.

Je trouve ça malsain car cela veut dire créer une forme d'inconfort pour en diminuer une autre.

Dans le sens inverse, dire à A de critiquer le code de B, alors que A sait que B est attaché·e à son code, c'est  demander à A de déligitimer B.
Les gens ne sont pas dupes de la violence qu'on leur fait infliger à d'autres.

Pour moi la bonne manière de limiter les conséquences de faire des erreurs dans du code est de travailler pour qu'elle trouve d'autres manières, plus fortes, d'appuyer sa légitimité, et de trouver les manières les moins délégitimantes pour travailler ensemble.

Avec de l'expérience, on peut atteindre l'étape où faire des erreurs "normales", ne vous atteignent plus.

On peut ne jamais se sentir à l'abri d'une erreur vraiment grave, celle qui peut vous toucher et vous humilier, et ne jamais vraiment baisser sa garde.
Mais en moyenne, on ne se sent plus trop en danger.

== La crème de la crème et "les têtes bien faites"

L'informatique valorise énormément les personnes dont la légitimité ne repose pas directement sur leur connaissance du code.

Pour une personne ayant maîtrisé, avec du temps, plusieurs languages de programmation, il peut être tentant de penser que cette étape a été atteinte grâce à une compétence spécifique, ou un trait de caractère, qui permet d'apprendre plus vite, plutot que de l'obstination ou un concours de circonstance.

Comme de plus, plus on a appris de langages plus il devient facile d'en apprendre d'autre, on peut rétrospectivement réécrire l'histoire en prenant le résultat de l'apprentissage pour son point de départ

Il est tentant, une fois atteint ce stade, de s'entourer d'autres élus du même club.

Ça peut donner ça

[quote]
____
Chez nous on recrute des gens qui savent apprendre, peu importe s'ils codent pour l'instant en js ou en Python, ceux qui ont une tête bien faite peuvent apprendre un autre langage en quelques semaines ou quelques mois.

On ne prend que les meilleurs.
____

À mon humble avis, cette approche du recrutement, comme bien d'autres, filtre moins les candidat·e·s sur leur compétence que sur vision du monde.

En effet il est difficile de vérifier la capacité des candidats à apprendre un langage de programmation en quelques semaines, par contre il est très facile de vérifier la croyance des candidats dans cette capacité.

Dis autrement : au lieu de trier les personnes qui _savent apprendre_ vite, ce filtre trie des personnes qui _sont peruadées de savoir apprendre_ vite.

Mais toutes les personnes qui _savent apprendre_ vite, mais dont la légitimé s'appuie, au moins en partie, sur la connaissance d'un langage, ne candidateront pas ou ne seront pas retenues.
